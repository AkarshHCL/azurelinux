From bfa97f70ca7cd0018dc839e1e0bcf819f9855e66 Mon Sep 17 00:00:00 2001
From: lanzeliu <lanzeliu@microsoft.com>
Date: Thu, 26 Sep 2024 14:37:09 -0700
Subject: [PATCH] Fix for CVE-2023-4782.

---
 internal/initwd/module_install.go             |  8 +++++++
 internal/initwd/module_install_test.go        | 21 +++++++++++++++++++
 .../invalid-module-name/child/main.tf         |  3 +++
 .../testdata/invalid-module-name/main.tf      |  3 +++
 4 files changed, 35 insertions(+)
 create mode 100644 internal/initwd/testdata/invalid-module-name/child/main.tf
 create mode 100644 internal/initwd/testdata/invalid-module-name/main.tf

diff --git a/internal/initwd/module_install.go b/internal/initwd/module_install.go
index adc5dec5ec..929a5e5587 100644
--- a/internal/initwd/module_install.go
+++ b/internal/initwd/module_install.go
@@ -11,6 +11,7 @@ import (
 	"strings"
 
 	version "github.com/hashicorp/go-version"
+	"github.com/hashicorp/hcl/v2/hclsyntax"
 	"github.com/hashicorp/terraform-config-inspect/tfconfig"
 	"github.com/hashicorp/terraform/internal/addrs"
 	"github.com/hashicorp/terraform/internal/earlyconfig"
@@ -120,6 +121,13 @@ func (i *ModuleInstaller) installDescendentModules(ctx context.Context, rootMod
 	cfg, cDiags := earlyconfig.BuildConfig(rootMod, earlyconfig.ModuleWalkerFunc(
 		func(req *earlyconfig.ModuleRequest) (*tfconfig.Module, *version.Version, tfdiags.Diagnostics) {
 
+			if !hclsyntax.ValidIdentifier(req.Name) {
+				// A module with an invalid name shouldn't be installed at all. This is
+				// mostly a concern for remote modules, since we need to be able to convert
+				// the name to a valid path.
+				return nil, nil, diags
+			}
+
 			key := manifest.ModuleKey(req.Path)
 			instPath := i.packageInstallPath(req.Path)
 
diff --git a/internal/initwd/module_install_test.go b/internal/initwd/module_install_test.go
index b05c5619f6..cf6486fa98 100644
--- a/internal/initwd/module_install_test.go
+++ b/internal/initwd/module_install_test.go
@@ -110,6 +110,27 @@ func TestModuleInstaller_error(t *testing.T) {
 	}
 }
 
+func TestModuleInstaller_invalidModuleName(t *testing.T) {
+	fixtureDir := filepath.Clean("testdata/invalid-module-name")
+	dir, done := tempChdir(t, fixtureDir)
+	defer done()
+
+	hooks := &testInstallHooks{}
+
+	modulesDir := filepath.Join(dir, ".terraform/modules")
+
+	loader, close := configload.NewLoaderForTests(t)
+	defer close()
+	inst := NewModuleInstaller(modulesDir, loader, registry.NewClient(nil, nil))
+	_, diags := inst.InstallModules(context.Background(), dir, "tests", false, false, hooks)
+
+	if !diags.HasErrors() {
+		t.Fatal("expected error")
+	} else {
+		assertDiagnosticSummary(t, diags, "Invalid module instance name")
+	}
+}
+
 func TestModuleInstaller_packageEscapeError(t *testing.T) {
 	fixtureDir := filepath.Clean("testdata/load-module-package-escape")
 	dir, done := tempChdir(t, fixtureDir)
diff --git a/internal/initwd/testdata/invalid-module-name/child/main.tf b/internal/initwd/testdata/invalid-module-name/child/main.tf
new file mode 100644
index 0000000000..347fbbc13b
--- /dev/null
+++ b/internal/initwd/testdata/invalid-module-name/child/main.tf
@@ -0,0 +1,3 @@
+output "boop" {
+  value = "beep"
+}
\ No newline at end of file
diff --git a/internal/initwd/testdata/invalid-module-name/main.tf b/internal/initwd/testdata/invalid-module-name/main.tf
new file mode 100644
index 0000000000..fcc5b8d1c9
--- /dev/null
+++ b/internal/initwd/testdata/invalid-module-name/main.tf
@@ -0,0 +1,3 @@
+module "../invalid" {
+  source  = "./child"
+}
\ No newline at end of file
-- 
2.44.0

