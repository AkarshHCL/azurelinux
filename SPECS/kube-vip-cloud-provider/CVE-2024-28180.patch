From f751469da187d9072b2f76d48dcfe9a5f1536533 Mon Sep 17 00:00:00 2001
From: Jacob Hoffman-Andrews <github@hoffman-andrews.com>
Date: Thu, 7 Mar 2024 14:25:21 -0800
Subject: [PATCH] v2: backport decompression limit fix (#109)

Backport from #107.

Modified to apply to vendored code by: Ahmed Badawi <ahmedbadawi@microsoft.com>
---
 vendor/gopkg.in/square/go-jose.v2/encoding.go | 21 +++++++++++++++----
 1 file changed, 17 insertions(+), 4 deletions(-)

diff --git a/vendor/gopkg.in/square/go-jose.v2/encoding.go b/vendor/gopkg.in/square/go-jose.v2/encoding.go
index b9687c6..ac4a44e 100644
--- a/vendor/gopkg.in/square/go-jose.v2/encoding.go
+++ b/vendor/gopkg.in/square/go-jose.v2/encoding.go
@@ -21,6 +21,7 @@ import (
        "compress/flate"
        "encoding/base64"
        "encoding/binary"
+       "fmt"
        "io"
        "math/big"
        "regexp"
@@ -79,7 +80,7 @@ func decompress(algorithm CompressionAlgorithm, input []byte) ([]byte, error) {
        }
 }

-// Compress with DEFLATE
+// deflate compresses the input.
 func deflate(input []byte) ([]byte, error) {
        output := new(bytes.Buffer)

@@ -91,15 +92,27 @@ func deflate(input []byte) ([]byte, error) {
        return output.Bytes(), err
 }

-// Decompress with DEFLATE
+// inflate decompresses the input.
+//
+// Errors if the decompressed data would be >250kB or >10x the size of the
+// compressed data, whichever is larger.
 func inflate(input []byte) ([]byte, error) {
        output := new(bytes.Buffer)
        reader := flate.NewReader(bytes.NewBuffer(input))

-       _, err := io.Copy(output, reader)
-       if err != nil {
+       maxCompressedSize := 10 * int64(len(input))
+       if maxCompressedSize < 250000 {
+               maxCompressedSize = 250000
+       }
+
+       limit := maxCompressedSize + 1
+       n, err := io.CopyN(output, reader, limit)
+       if err != nil && err != io.EOF {
                return nil, err
        }
+       if n == limit {
+               return nil, fmt.Errorf("uncompressed data would be too large (>%d bytes)", maxCompressedSize)
+       }

        err = reader.Close()
        return output.Bytes(), err
--
2.39.4